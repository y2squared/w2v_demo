#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('w2v:server');
const http = require('http');
const similarword = require('../similarword.js');
const socketio = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
const io = socketio.listen(server);
server.on('error', onError);
server.on('listening', onListening);

io.sockets.on("connection",function(socket){
	//接続開始時
	socket.on("connected", function(name) {
		io.sockets.emit("publish", {value:"["+name +"]" });
	});

	//メッセージ
	socket.on("publish", function (data) {
		var query = {'src':data.value};
		console.log(query);
		// word2vecの結果データをスコア順に最大１０件取得して返す
		similarword.find({src:data.value},'src dst score',{'sort':{score:-1},limit:10},function(err,similarwords){
			if (err) {
				socket.emit("publish", {value:"",error:"data not found" });
			}else {
				socket.emit("publish", {value:similarwords});
				console.log(similarwords);
			}
		});
	});

	socket.on("disconnect", function() {
		io.sockets.emit("publish", {value:"disconnected"});
	});

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/bootstrap.min.css' />
  </head>
  <body>
    <div class="navbar navbar-inverse navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <a class="brand" href="#">word2vecのデモ</a>
        </div>
      </div>
    </div>
    <script src="http://code.jquery.com/jquery.min.js"></script>
    <script src="/javascripts/bootstrap.min.js" ></script>
    <script src="/javascripts/d3.js"></script>
    <script type="text/javascript" src="http://gabelerner.github.io/canvg/rgbcolor.js"></script> 
    <script type="text/javascript" src="http://gabelerner.github.io/canvg/StackBlur.js"></script>
    <script type="text/javascript" src="http://gabelerner.github.io/canvg/canvg.js"></script>  
    <div class="container">
      <div class="hero-unit">    
	word2vecで遊んでみました。<br/>
	ニコニコ動画のアイマス関連の動画のタグとタイトル情報を学習して類似ワードを検索し,<br/>
	検索ワードに入れた語の類似ワードを１０件とってきてグラフに表示します.<br/>
	単語間に走っている線が短いほど類似しているものです.<br/>
	グラフの丸をクリックすることでもその単語を検索して類似ワードを検索することができます.<br/>
	あまり関係なさそうな単語が類似ワードとして出たらごめんなさい...
      </div>
    </div>
    <div class=container id=test>
	<center>
    	<input type="text" id="msg_input" style="width:400px;" placeholder="お気に入りのキャラクターやタグを入れてみてください" />
  	<button class="btn" onclick="query();">検索</button>
	<button class="btn" onclick="resetGraph();">グラフのリセット</button>
	<div id="graph"></div>
  	<div id="msg"></div>
  	<script src="/socket.io/socket.io.js"></script>
  	<script type="text/javascript">
	var graph = {nodes:
			[
			],
		links:
			[
			]};
	var word2index = [];
    	// イベントとコールバックの定義
    	var socketio = io.connect('http://133.130.113.188:3000');
    	socketio.on("publish", function (data) { 
			if(!data.error)updateGraph(data.value); 
			});

	function resetGraph() {
		graph.nodes=[];
		graph.links=[];
		word2index =[];
		redraw();
	}

	// 検索ボタンを叩いたらnode側にクエリを投げる
    	function query() {
      		var textInput = document.getElementById('msg_input');
      		var msg = textInput.value;
		msg = msg.replace(/ /g, "_");
      		socketio.emit("publish", {value: msg});
      		textInput.value = '';
    	}
	
    	// 返ってきた類似ワードをグラフに追加
	function updateGraph (obj) {
		// クエリが何番目のノードか調べる
		var srcIdx = $.inArray(obj[0].src, word2index);
		if ( srcIdx < 0 ) { 
			graph.nodes.push({word:obj[0].src,link:0});
			word2index.push(obj[0].src);
			srcIdx = word2index.length-1;
		}
		for(var i = 0 ; i < obj.length ; ++i) {
			// クエリの結果ワードが既にないかをチェック
			var targetIdx = $.inArray(obj[i].dst, word2index);
			if ( targetIdx < 0 ) { // なければ追加する
				graph.nodes.push({word:obj[i].dst,link:0});
				word2index.push(obj[i].dst);
				targetIdx = word2index.length-1;
			}
			graph.links.push({source:srcIdx,target:targetIdx,value:obj[i].score});
			graph.nodes[srcIdx].link++;
			graph.nodes[targetIdx].link++;
		}
		// 新たな頂点・リンクを加えて再描画
		redraw(); 
    	}


    	// 開始処理
	var w = 800, h = 600;
	var svg = d3.select("#graph").append("svg")
		    .attr("width", w)
		    .attr("height", h);
	var force = d3.layout.force()
		      .charge(-240)
		      .linkDistance(function(d){return 80.0/d.value;})
	              .size([w,h]);
	
	force.on("tick", function() {
    		link.attr("x1", function(d) { return d.source.x; })
    		    .attr("y1", function(d) { return d.source.y; })
    		    .attr("x2", function(d) { return d.target.x; })
    		    .attr("y2", function(d) { return d.target.y; });

    		node.attr("cx", function(d) { return d.x; })
    		    .attr("cy", function(d) { return d.y; });
	});
	
	function redraw() {

		force.nodes(graph.nodes)
		     .links(graph.links)
		     .linkDistance(function(d){return 60.0/d.value;})
		     .start();

		var link = svg.selectAll("line.link")
	           .data(graph.links);

		//新規リンクへの処理
		link.enter().insert("svg:line",".node")
		     .attr("class","link")
		     .style({stroke:"#999999", "stroke-width": "2px"})
		     .attr("x1", function(d) { return d.source.x;})
		     .attr("y1", function(d) { return d.source.y;})
		     .attr("x2", function(d) { return d.target.x;})
		     .attr("y2", function(d) { return d.target.y;});

		var nodes = svg.selectAll(".node")
		   .data(graph.nodes);

		//既存ノードの更新
		svg.selectAll(".node")
		   .style("stroke", function(d){
				   if(d.link == 1) return "#ff0000";
				   else if (d.link < 10) return "#00ff00";
				   else return "#0000ff";})
		   .style("stroke-width", 2)
		   .style("fill","white");
		   //.selectAll("title")
	           //.data(graph.nodes)
		   //.text(function(d){return d.word;})

		//新規ノードへの処理
		nodes.enter().append("circle")
		     .attr("class","node")
		     .style("stroke-width", 2)
		     .style("stroke-miterlimit", 1)
		     .style("stroke", function(d){
				     if(d.link < 5) return "#ff0000"; 
				     else if(d.link < 10) return "#00ff00";
				     else  return "#0000ff";})
		     .style("fill","white")
		     .style("r",15)
		     .call(force.drag)
		     .attr("cx",function(d){ return d.x; })
		     .attr("cy",function(d){ return d.y; })
		     .on("click", function(d,i){socketio.emit("publish",{value:d.word});});
		     //.append("title").text(function(d){return d.word;})

		//text処理
		var texts = svg.selectAll(".txt")
			       .data(graph.nodes);
		
		texts.text(function(d){return d.word;})
		     .call(force.drag);

		texts.enter().append("text")
		     .attr("class","txt")
                     .attr("text-anchor","middle")
                     .style("font", "6pt sans-serif")
                     .style("fill", "#000")
                     .text(function(d){return d.word;})
                     .call(force.drag);

		//不要ノードの削除
		link.exit().remove();
		nodes.exit().remove();
		texts.exit().remove();


		force.on("tick",function() {
			link
			    .attr("x1", function(d){return d.source.x;})		
			    .attr("y1", function(d){return d.source.y;})		
			    .attr("x2", function(d){return d.target.x;})		
			    .attr("y2", function(d){return d.target.y;});
	    		nodes
    			    .attr("cx", function(d) {return d.x;})			
    			    .attr("cy", function(d) {return d.y;});
    			texts
			    .attr("x", function(d){return d.x;})
    			    .attr("y", function(d){return d.y;});			    
		});

	}
	function tweetGraph() {
		//現状のSVGをcanvasに描画
	        var svgText = document.getElementById('graph').innerHTML; 
		console.log(svgText);
		canvg('canvas', svgText);
	}

  	</script>
	<!--
        <textarea id="tweetmsg" rows="4" cols="40"> #ニコマスタグ解析 http://bit.ly/1NbwGA6</textarea><br/>
	<button class="btn" onclick="tweetGraph();"> tweet</button>
	<div id="canvasarea">
		<canvas id="canvas"></canvas>
	</div>
	-->
	</center>
    </div>
  </body>
</html>
